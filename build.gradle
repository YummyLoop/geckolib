plugins {
    id "architectury-plugin"
    id "forgified-fabric-loom" apply false
    id 'com.github.johnrengelman.shadow'
    id 'com.matthewprenger.cursegradle'
    id 'maven-publish'
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "forgified-fabric-loom"
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        //mappings loom.officialMojangMappings()
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    }

}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = project.archives_base_name
    def snapshotVersion = System.getenv("GITHUB_RUN_NUMBER")
    version = snapshotVersion == null ? project.mod_version : "SNAPSHOT-" + snapshotVersion
    group = project.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }

    java {
        withSourcesJar()
    }

    jar {
        from "LICENSE"
        manifest {
            attributes([
                    "Specification-Title"     : "GeckoLib",
                    "Specification-Vendor"    : "Gecko",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${rootProject.mod_version}",
                    "Implementation-Vendor"   : "Gecko",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}


artifacts {
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact sourcesJar
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

publishing {
    repositories {
        maven {
            url repsyUrl
            credentials {
                def envUsername = System.getenv("repsyUsername")
                def envPassword = System.getenv("repsyPassword")
                username = envUsername == null ? findProperty("repsyUsername") : envUsername
                password = envPassword == null ? findProperty("repsyPassword") : envPassword
            }
        }
    }
}

if (file('key.properties').exists()) {
    curseforge {

        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "398667"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
            addGameVersion("1.16.4")
            addGameVersion("1.16.5")
            addGameVersion("Fabric")
            addGameVersion("Java 8")

            relations {
                requiredDependency 'fabric-api'
            }
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
        options {
            //debug = true
            forgeGradleIntegration = false
        }
    }
}


